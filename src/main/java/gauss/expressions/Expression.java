package gauss.expressions;


/**
 * Интерфейс, описывающий уравнения нашей линейной системы уравнений.
 *
 * По соглашению с которым, мы можем к одному уравнению прибавлять другое,
 * умножить уравнение на число, вернуть или изменить любой его элемент, т.е.
 * коэфициент перед неизвестным, узнать размер уравнения (что такое размер - определяет
 * конкретная реализация этого интерфейся, класс).
 *
 * @param <N> - аргумент типа, который позволяет работать с любым ЧИСЛОВЫМ типом.
 * @param <E> - аргумент типа, который не позволяет считать, что два реализатора этого интерфейса
 *           будут являться одним типом (это сложная и запутанная логика generic-ов в java, иногда сам путаюсь :)) ).
 */
public interface Expression <N extends Number, E extends Expression<N, E>>{

    /**
     * Метод для сложения уравнений, т.е строк нашей матрицы.
     * @param expression - уравнение которое мы прибавим к тому на котором был вызват этот метод.
     */
    void add(E expression);

    /**
     * Метод для увеличения/уменьшения всех элементов в одинаковое кол-во раз.
     * @param number - число на которое мы умножим все элементы нашей строки, т.е. все коэфициенты уравнения и свободный член.
     * @return - возвращает нашу преобразованную строку.
     */
    E multiply(double number);

    /**
     * Каждый реализатор решает для себя сам, что значит размер.
     * @return - вернет размер уравнения.
     */
    int size();

    /**
     * Метод для возвражения любого из коэф-тов при нажих неизвестных или свободный член.
     * @param index - индекс нашего элемента, который мы хотим вернуть.
     * @return - вернет коэф. при неизвестной, т.е. элемент строки.
     */
    N getCoefficient(int index);

    /**
     * Метод,который позволяет изменять любой элемент стороки, будь то это
     * наш коэф. при неивестной или свободный член.
     * @param index - индекс нашего элемента, который мы хотим изменить.
     * @param coeff - элемент НА который мы хотим поменять.
     */
    void setCoefficient(int index, N coeff);
}
